package com.github.exbotanical.resource.config;

import com.github.exbotanical.resource.utils.FormatterUtils;
import java.net.URI;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

/**
 * Configuration for DynamoDB.
 */
@Configuration
public class DynamoDBConfig {

  @Value("${aws.access_key")
  private String accessKey;

  @Value("${aws.secret_key")
  private String secretKey;

  @Value("${aws.dynamodb.host}")
  private String host;

  @Value("${aws.dynamodb.port}")
  private String port;

  @Value("${aws.dynamodb.region}")
  private String region;

  @Bean
  DynamoDbEnhancedClient amazonDynamoDBEnhancedClient() {
    return DynamoDbEnhancedClient.builder()
        .extensions(AutoGeneratedTimestampRecordExtension.create())
        .dynamoDbClient(getDynamoDbClient()).build();
  }

  private DynamoDbClient getDynamoDbClient() {
    ClientOverrideConfiguration.Builder overrideConfig =
        ClientOverrideConfiguration.builder();

    return DynamoDbClient.builder()
        .overrideConfiguration(overrideConfig.build())
        .endpointOverride(URI.create(FormatterUtils.toEndpoint(host, port)))
        .region(Region.of(region))
        // @todo find correct API for this
        .credentialsProvider(StaticCredentialsProvider.create(new AwsCredentials() {
          @Override
          public String accessKeyId() {
            return accessKey;
          }

          @Override
          public String secretAccessKey() {
            return secretKey;
          }
        }))
        .build();
  }
}
