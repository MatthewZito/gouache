#!/usr/bin/env bash
SESSION='123'
RESOURCE_PORT=4000
AUTH_PORT=5000
REPORTING_PORT=6001
DYNAMO_PORT=8000
SQS_PORT=9324

# aws dynamodb --endpoint-url http://localhost:8000 --region us-east-1 --table-name resource put-item --item  '{"Id": { "S": "123" }, "title": {"S": "No One You Know"}, "tags": { "SS": ["music"] } }'

# create resource
create_resource () {
  local title="${1:-"title"}"
  local tags="${2:-["\"art\""]}"

  curl localhost:$RESOURCE_PORT/api/resource -d "{\"title\": \"$title\", \"tags\": $tags}" -H 'Content-Type: application/json' --cookie "gouache_session=$SESSION" -v
}

# get resource
get_resource () {
  local id="$1"

  curl localhost:$RESOURCE_PORT/api/resource/$id --cookie "gouache_session=$SESSION" -v
}

# update resource
update_resource () {
  local id="$1"

  local title="${2:-"updated title"}"
  local tags="${3:-["\"music\""]}"

  curl -X PATCH localhost:$RESOURCE_PORT/api/resource/$id -d "{\"title\": \"$title\", \"tags\": $tags}" -H 'Content-Type: application/json' --cookie "gouache_session=$SESSION" -v
}

# create report
create_report() {
  local caller="${1:-"x"}"
  local data="${2:-"y"}"
  local name="${3:-"z"}"

  curl localhost:$REPORTING_PORT/api/report -d "{\"caller\": \"$caller\", \"data\": \"$data\", \"name\": \"$name\"}" -H 'Content-Type: application/json' --cookie "gouache_session=$SESSION" -v
}

# get report
get_report() {
  local id="$1"

  curl localhost:$REPORTING_PORT/api/report/$1 --cookie "gouache_session=$SESSION" -v
}

# get all reports
get_all_reports() {
  local last_page_key="$1"

  if [[ key -ne "" ]]; then
    curl localhost:$REPORTING_PORT/api/report?last_page_key=$last_page_key --cookie "gouache_session=$SESSION" -v
  else
    curl localhost:$REPORTING_PORT/api/report --cookie "gouache_session=$SESSION" -v
  fi
}

# register user
register() {
  local username="${1:-'user'}"
  local password="${2:-'password'}"

  curl localhost:$AUTH_PORT/auth/register -d "{\"username\":\"$username\",\"password\":\"$password\"}" -H "Content-Type: application/json"
}

# login user
login() {
  local username="${1:-'user'}"
  local password="${2:-'password'}"

  curl localhost:$AUTH_PORT/auth/login -d "{\"username\":\"$username\",\"password\":\"$password\"}" -H "Content-Type: application/json"
}

# create dynamodb table
create_table () {
  local table_name="$1"
  local hash_key="$2"

  aws dynamodb --endpoint-url http://localhost:$DYNAMO_PORT --region us-east-1 create-table --table-name $table_name --attribute-definitions AttributeName=$hash_key,AttributeType=S --key-schema AttributeName=$hash_key,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
}

# create sqs queue
create_queue () {
  local queue_name="${1:-"report-queue"}"

  curl -v localhost:$SQS_PORT -d "Action=CreateQueue&QueueName=$queue_name"
}

# get sqs queue messages
get_queue () {
  local queue_name="${1:-"report-queue"}"

  curl -v localhost:$SQS_PORT/queue/$queue_name -d "Action=ReceiveMessage&MessageAttributeName.N=All"
}

# cleanup resources and services
cleanup() {
  # stop all containers
  docker stop $(docker ps -a -q)

  # stop redis
  sudo service redis-server stop
}

# initialize resources and services needed for local targeting
main () {
  # start redis
  sudo service redis-server start

  # set session
  echo "SET "$SESSION" '{\"username\":\"user\",\"expiry\":\"9999-08-26T15:28:03.683Z\"}'" | redis-cli

	# set redis password
	echo "SET CONFIG requirepass password" | redis-cli

  # start local db
  docker run -p $DYNAMO_PORT:$DYNAMO_PORT amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb &

  # start local queue
  docker run -p 9324:9324 -p 9325:9325 softwaremill/elasticmq &

  # create tables
  create_table resource id
  create_table report id
  create_table user username

  # create queues
  create_queue 'report-queue'
}

# stop here if being sourced
return 2>/dev/null

# stop on errors and unset variable refs
set -o errexit
set -o nounset

main $*


# curl -v localhost:9324/queue/report-queue -d "Action=SendMessage&Version=2011-10-01&MessageBody=example&MessageAttribute.1.name=&MessageAttribute.1.Name=name&MessageAttribute.1.Value.StringValue=the_name&MessageAttribute.1.Value.DataType=String&MessageAttribute.2.Name=caller&MessageAttribute.2.Value.StringValue=gouache/local&MessageAttribute.2.Value.DataType=String"
curl -v localhost:9324/queue/report-queue -d "Action=ReceiveMessage&MessageAttributeName.N=All"
# mvn spring-boot:run -Dspring-boot.run.arguments="--spring.profiles.active=local"
# aws dynamodb --endpoint-url http://localhost:8000 --region us-east-1 scan --table-name report
# aws dynamodb --endpoint-url http://localhost:8000 --region us-east-1 delete-table --table-name report
